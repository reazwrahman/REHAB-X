{"ast":null,"code":"'use strict'; // MODULES //\n\nvar isArray = require('validate.io-array'),\n    isFunction = require('validate.io-function'); // L2NORM //\n\n/**\n* FUNCTION: l2norm( arr[, accessor] )\n*\tCalculates the L2 norm (Euclidean norm) of an array.\n*\n* @param {Array} arr - input array\n* @param {Function} [accessor] - accessor function for accessing array values\n* @returns {Number|Null} L2 norm or null\n*/\n\n\nfunction l2norm(arr, clbk) {\n  if (!isArray(arr)) {\n    throw new TypeError('l2norm()::invalid input argument. Must provide an array.  Value: `' + arr + '`.');\n  }\n\n  if (arguments.length > 1) {\n    if (!isFunction(clbk)) {\n      throw new TypeError('l2norm()::invalid input argument. Accessor must be a function. Value: `' + clbk + '`.');\n    }\n  }\n\n  var len = arr.length,\n      t = 0,\n      s = 1,\n      r,\n      val,\n      abs,\n      i;\n\n  if (!len) {\n    return null;\n  }\n\n  if (clbk) {\n    for (i = 0; i < len; i++) {\n      val = clbk(arr[i], i);\n      abs = val < 0 ? -val : val;\n\n      if (abs > 0) {\n        if (abs > t) {\n          r = t / val;\n          s = 1 + s * r * r;\n          t = abs;\n        } else {\n          r = val / t;\n          s = s + r * r;\n        }\n      }\n    }\n  } else {\n    for (i = 0; i < len; i++) {\n      val = arr[i];\n      abs = val < 0 ? -val : val;\n\n      if (abs > 0) {\n        if (abs > t) {\n          r = t / val;\n          s = 1 + s * r * r;\n          t = abs;\n        } else {\n          r = val / t;\n          s = s + r * r;\n        }\n      }\n    }\n  }\n\n  return t * Math.sqrt(s);\n} // end FUNCTION l2norm()\n// EXPORTS //\n\n\nmodule.exports = l2norm;","map":null,"metadata":{},"sourceType":"script"}