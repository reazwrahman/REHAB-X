{"ast":null,"code":"'use strict'; // MODULES //\n\nvar dot = require('compute-dot'),\n    l2norm = require('compute-l2norm'),\n    isArray = require('validate.io-array'),\n    isFunction = require('validate.io-function'); // FUNCTIONS //\n\n/**\n * FUNCTION: partial( fn, j )\n *\tPartially applied function from the right.\n *\n * @private\n * @param {Function} fn - input function\n * @param {Number} j - array index\n * @returns {Function} partially applied function\n */\n\n\nfunction partial(fn, j) {\n  return function accessor(d, i) {\n    return fn(d, i, j);\n  };\n} // end FUNCTION partial()\n// COSINE SIMILARITY //\n\n/**\n* FUNCTION: similarity( x, y[, accessor] )\n*\tComputes the cosine similarity between two arrays.\n*\n* @param {Number[]|Array} x - input array\n* @param {Number[]|Array} y - input array\n* @param {Function} [accessor] - accessor function for accessing array values\n* @returns {Number|Null} cosine similarity or null\n*/\n\n\nfunction similarity(x, y, clbk) {\n  var a, b, c;\n\n  if (!isArray(x)) {\n    throw new TypeError('cosine-similarity()::invalid input argument. First argument must be an array. Value: `' + x + '`.');\n  }\n\n  if (!isArray(y)) {\n    throw new TypeError('cosine-similarity()::invalid input argument. Second argument must be an array. Value: `' + y + '`.');\n  }\n\n  if (arguments.length > 2) {\n    if (!isFunction(clbk)) {\n      throw new TypeError('cosine-similarity()::invalid input argument. Accessor must be a function. Value: `' + clbk + '`.');\n    }\n  }\n\n  if (x.length !== y.length) {\n    throw new Error('cosine-similarity()::invalid input argument. Input arrays must have the same length.');\n  }\n\n  if (!x.length) {\n    return null;\n  }\n\n  if (clbk) {\n    a = dot(x, y, clbk);\n    b = l2norm(x, partial(clbk, 0));\n    c = l2norm(y, partial(clbk, 1));\n  } else {\n    a = dot(x, y);\n    b = l2norm(x);\n    c = l2norm(y);\n  }\n\n  return a / (b * c);\n} // end FUNCTION similarity()\n// EXPORTS //\n\n\nmodule.exports = similarity;","map":null,"metadata":{},"sourceType":"script"}