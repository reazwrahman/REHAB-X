{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Eric Romero\\\\Documents\\\\GitHub\\\\rehab-x\\\\exercise\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Eric Romero\\\\Documents\\\\GitHub\\\\rehab-x\\\\exercise\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Eric Romero\\\\Documents\\\\GitHub\\\\rehab-x\\\\exercise\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport * as tf from '@tensorflow/tfjs';\n\nvar posenet = require('@tensorflow-models/posenet');\n\nvar color = '#FFFFFF'; //#AF1F24'\n\nvar boundingBoxColor = 'red';\nvar lineWidth = 5;\n\nfunction toTuple(_ref) {\n  var y = _ref.y,\n      x = _ref.x;\n  return [y, x];\n}\n\nexport function drawPoint(ctx, y, x, r, color) {\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n}\n/**\r\n * Draws a line on a canvas, i.e. a joint\r\n */\n\nexport function drawSegment(_ref2, _ref3, color, scale, ctx) {\n  var _ref4 = _slicedToArray(_ref2, 2),\n      ay = _ref4[0],\n      ax = _ref4[1];\n\n  var _ref5 = _slicedToArray(_ref3, 2),\n      by = _ref5[0],\n      bx = _ref5[1];\n\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n/**\r\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\r\n */\n\nexport function drawSkeleton(keypoints, minConfidence, ctx) {\n  var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var adjacentKeyPoints = posenet.getAdjacentKeyPoints(keypoints, minConfidence);\n  adjacentKeyPoints.forEach(function (keypoints) {\n    drawSegment(toTuple(keypoints[0].position), toTuple(keypoints[1].position), color, scale, ctx);\n  });\n}\n/**\r\n * Draw pose keypoints onto a canvas\r\n */\n\nexport function drawKeypoints(keypoints, minConfidence, ctx) {\n  var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  for (var i = 0; i < keypoints.length; i++) {\n    var keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n\n    var _keypoint$position = keypoint.position,\n        y = _keypoint$position.y,\n        x = _keypoint$position.x;\n    drawPoint(ctx, y * scale, x * scale, 3, color);\n  }\n}\n/**\r\n * Draw the bounding box of a pose. For example, for a whole person standing\r\n * in an image, the bounding box will begin at the nose and extend to one of\r\n * ankles\r\n */\n\nexport function drawBoundingBox(keypoints, ctx) {\n  var boundingBox = posenet.getBoundingBox(keypoints);\n  ctx.rect(boundingBox.minX, boundingBox.minY, boundingBox.maxX - boundingBox.minX, boundingBox.maxY - boundingBox.minY);\n  ctx.strokeStyle = boundingBoxColor;\n  ctx.stroke();\n}\n/**\r\n * Converts an arary of pixel data into an ImageData object\r\n */\n\nexport function renderToCanvas(_x, _x2) {\n  return _renderToCanvas.apply(this, arguments);\n}\n/**\r\n * Draw an image on a canvas\r\n */\n\nfunction _renderToCanvas() {\n  _renderToCanvas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(a, ctx) {\n    var _a$shape, height, width, imageData, data, i, j, k;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _a$shape = _slicedToArray(a.shape, 2), height = _a$shape[0], width = _a$shape[1];\n            imageData = new ImageData(width, height);\n            _context.next = 4;\n            return a.data();\n\n          case 4:\n            data = _context.sent;\n\n            for (i = 0; i < height * width; ++i) {\n              j = i * 4;\n              k = i * 3;\n              imageData.data[j + 0] = data[k + 0];\n              imageData.data[j + 1] = data[k + 1];\n              imageData.data[j + 2] = data[k + 2];\n              imageData.data[j + 3] = 255;\n            }\n\n            ctx.putImageData(imageData, 0, 0);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _renderToCanvas.apply(this, arguments);\n}\n\nexport function renderImageToCanvas(image, size, canvas) {\n  canvas.width = size[0];\n  canvas.height = size[1];\n  var ctx = canvas.getContext('2d');\n  ctx.drawImage(image, 0, 0);\n}\n/**\r\n * Draw heatmap values, one of the model outputs, on to the canvas\r\n * Read our blog post for a description of PoseNet's heatmap outputs\r\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\r\n */\n\nexport function drawHeatMapValues(heatMapValues, outputStride, canvas) {\n  var ctx = canvas.getContext('2d');\n  var radius = 5;\n  var scaledValues = heatMapValues.mul(tf.scalar(outputStride, 'int32'));\n  drawPoints(ctx, scaledValues, radius, color);\n}\n/**\r\n * Used by the drawHeatMapValues method to draw heatmap points on to\r\n * the canvas\r\n */\n\nfunction drawPoints(ctx, points, radius, color) {\n  var data = points.buffer().values;\n\n  for (var i = 0; i < data.length; i += 2) {\n    var pointY = data[i];\n    var pointX = data[i + 1];\n\n    if (pointX !== 0 && pointY !== 0) {\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = color;\n      ctx.fill();\n    }\n  }\n}\n/**\r\n * Draw offset vector values, one of the model outputs, on to the canvas\r\n * Read our blog post for a description of PoseNet's offset vector outputs\r\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\r\n */\n\n\nexport function drawOffsetVectors(heatMapValues, offsets, outputStride) {\n  var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var ctx = arguments.length > 4 ? arguments[4] : undefined;\n  var offsetPoints = posenet.singlePose.getOffsetPoints(heatMapValues, outputStride, offsets);\n  var heatmapData = heatMapValues.buffer().values;\n  var offsetPointsData = offsetPoints.buffer().values;\n\n  for (var i = 0; i < heatmapData.length; i += 2) {\n    var heatmapY = heatmapData[i] * outputStride;\n    var heatmapX = heatmapData[i + 1] * outputStride;\n    var offsetPointY = offsetPointsData[i];\n    var offsetPointX = offsetPointsData[i + 1];\n    drawSegment([heatmapY, heatmapX], [offsetPointY, offsetPointX], color, scale, ctx);\n  }\n}","map":{"version":3,"sources":["C:/Users/Eric Romero/Documents/GitHub/rehab-x/exercise/src/components/demo_util.js"],"names":["tf","posenet","require","color","boundingBoxColor","lineWidth","toTuple","y","x","drawPoint","ctx","r","beginPath","arc","Math","PI","fillStyle","fill","drawSegment","scale","ay","ax","by","bx","moveTo","lineTo","strokeStyle","stroke","drawSkeleton","keypoints","minConfidence","adjacentKeyPoints","getAdjacentKeyPoints","forEach","position","drawKeypoints","i","length","keypoint","score","drawBoundingBox","boundingBox","getBoundingBox","rect","minX","minY","maxX","maxY","renderToCanvas","a","shape","height","width","imageData","ImageData","data","j","k","putImageData","renderImageToCanvas","image","size","canvas","getContext","drawImage","drawHeatMapValues","heatMapValues","outputStride","radius","scaledValues","mul","scalar","drawPoints","points","buffer","values","pointY","pointX","drawOffsetVectors","offsets","offsetPoints","singlePose","getOffsetPoints","heatmapData","offsetPointsData","heatmapY","heatmapX","offsetPointY","offsetPointX"],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport * as tf from '@tensorflow/tfjs';\r\nconst posenet = require('@tensorflow-models/posenet');\r\n\r\nconst color = '#FFFFFF'; //#AF1F24'\r\nconst boundingBoxColor = 'red';\r\nconst lineWidth = 5;\r\n\r\nfunction toTuple({ y, x }) {\r\n  return [y, x];\r\n}\r\n\r\nexport function drawPoint(ctx, y, x, r, color) {\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\r\n  ctx.fillStyle = color;\r\n  ctx.fill();\r\n}\r\n\r\n/**\r\n * Draws a line on a canvas, i.e. a joint\r\n */\r\nexport function drawSegment([ay, ax], [by, bx], color, scale, ctx) {\r\n  ctx.beginPath();\r\n  ctx.moveTo(ax * scale, ay * scale);\r\n  ctx.lineTo(bx * scale, by * scale);\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.strokeStyle = color;\r\n  ctx.stroke();\r\n}\r\n\r\n/**\r\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\r\n */\r\nexport function drawSkeleton(keypoints, minConfidence, ctx, scale = 1) {\r\n  const adjacentKeyPoints = posenet.getAdjacentKeyPoints(\r\n    keypoints,\r\n    minConfidence\r\n  );\r\n\r\n  adjacentKeyPoints.forEach(keypoints => {\r\n    drawSegment(\r\n      toTuple(keypoints[0].position),\r\n      toTuple(keypoints[1].position),\r\n      color,\r\n      scale,\r\n      ctx\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Draw pose keypoints onto a canvas\r\n */\r\nexport function drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\r\n  for (let i = 0; i < keypoints.length; i++) {\r\n    const keypoint = keypoints[i];\r\n\r\n    if (keypoint.score < minConfidence) {\r\n      continue;\r\n    }\r\n\r\n    const { y, x } = keypoint.position;\r\n    drawPoint(ctx, y * scale, x * scale, 3, color);\r\n  }\r\n}\r\n\r\n/**\r\n * Draw the bounding box of a pose. For example, for a whole person standing\r\n * in an image, the bounding box will begin at the nose and extend to one of\r\n * ankles\r\n */\r\nexport function drawBoundingBox(keypoints, ctx) {\r\n  const boundingBox = posenet.getBoundingBox(keypoints);\r\n\r\n  ctx.rect(\r\n    boundingBox.minX,\r\n    boundingBox.minY,\r\n    boundingBox.maxX - boundingBox.minX,\r\n    boundingBox.maxY - boundingBox.minY\r\n  );\r\n\r\n  ctx.strokeStyle = boundingBoxColor;\r\n  ctx.stroke();\r\n}\r\n\r\n/**\r\n * Converts an arary of pixel data into an ImageData object\r\n */\r\nexport async function renderToCanvas(a, ctx) {\r\n  const [height, width] = a.shape;\r\n  const imageData = new ImageData(width, height);\r\n\r\n  const data = await a.data();\r\n\r\n  for (let i = 0; i < height * width; ++i) {\r\n    const j = i * 4;\r\n    const k = i * 3;\r\n\r\n    imageData.data[j + 0] = data[k + 0];\r\n    imageData.data[j + 1] = data[k + 1];\r\n    imageData.data[j + 2] = data[k + 2];\r\n    imageData.data[j + 3] = 255;\r\n  }\r\n\r\n  ctx.putImageData(imageData, 0, 0);\r\n}\r\n\r\n/**\r\n * Draw an image on a canvas\r\n */\r\nexport function renderImageToCanvas(image, size, canvas) {\r\n  canvas.width = size[0];\r\n  canvas.height = size[1];\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  ctx.drawImage(image, 0, 0);\r\n}\r\n\r\n/**\r\n * Draw heatmap values, one of the model outputs, on to the canvas\r\n * Read our blog post for a description of PoseNet's heatmap outputs\r\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\r\n */\r\nexport function drawHeatMapValues(heatMapValues, outputStride, canvas) {\r\n  const ctx = canvas.getContext('2d');\r\n  const radius = 5;\r\n  const scaledValues = heatMapValues.mul(tf.scalar(outputStride, 'int32'));\r\n\r\n  drawPoints(ctx, scaledValues, radius, color);\r\n}\r\n\r\n/**\r\n * Used by the drawHeatMapValues method to draw heatmap points on to\r\n * the canvas\r\n */\r\nfunction drawPoints(ctx, points, radius, color) {\r\n  const data = points.buffer().values;\r\n\r\n  for (let i = 0; i < data.length; i += 2) {\r\n    const pointY = data[i];\r\n    const pointX = data[i + 1];\r\n\r\n    if (pointX !== 0 && pointY !== 0) {\r\n      ctx.beginPath();\r\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\r\n      ctx.fillStyle = color;\r\n      ctx.fill();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Draw offset vector values, one of the model outputs, on to the canvas\r\n * Read our blog post for a description of PoseNet's offset vector outputs\r\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\r\n */\r\nexport function drawOffsetVectors(\r\n  heatMapValues,\r\n  offsets,\r\n  outputStride,\r\n  scale = 1,\r\n  ctx\r\n) {\r\n  const offsetPoints = posenet.singlePose.getOffsetPoints(\r\n    heatMapValues,\r\n    outputStride,\r\n    offsets\r\n  );\r\n\r\n  const heatmapData = heatMapValues.buffer().values;\r\n  const offsetPointsData = offsetPoints.buffer().values;\r\n\r\n  for (let i = 0; i < heatmapData.length; i += 2) {\r\n    const heatmapY = heatmapData[i] * outputStride;\r\n    const heatmapX = heatmapData[i + 1] * outputStride;\r\n    const offsetPointY = offsetPointsData[i];\r\n    const offsetPointX = offsetPointsData[i + 1];\r\n\r\n    drawSegment(\r\n      [heatmapY, heatmapX],\r\n      [offsetPointY, offsetPointX],\r\n      color,\r\n      scale,\r\n      ctx\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}